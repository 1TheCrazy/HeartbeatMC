plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"heartbeat" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}


remapJar{
	archiveFileName.set("${project.archives_base_name}-v${project.mod_version}+mc${project.minecraft_version}.jar")
}

// replacer Source Set
sourceSets {
	replacer {
		java.srcDir "src/replacer/java"
		resources.srcDir "src/replacer/resources"
	}
}

// Build replacer JAR
tasks.register("replacerJar", Jar) {
	manifest {
		attributes(
				"Main-Class": "net.heartbeat.replacer.Main"
		)
	}

	group = "build"
	description = "Assemble the replacer JAR from src/replacer"
	from sourceSets.replacer.output
	// predictable name: heartbeat-replacer-embedded.jar
	archiveBaseName.set("${project.archives_base_name}-replacer-embedded")
	archiveVersion.set("")
}

// Expose replacerJar as a CONSUMABLE VARIANT so Loom sees a proper 'module'
def objs = objects
configurations {
	embeddedReplacer {
		canBeResolved = false
		canBeConsumed = true
		attributes {
			attribute(Category.CATEGORY_ATTRIBUTE, objs.named(Category, Category.LIBRARY))
			attribute(Bundling.BUNDLING_ATTRIBUTE, objs.named(Bundling, Bundling.EXTERNAL))
			attribute(Usage.USAGE_ATTRIBUTE, objs.named(Usage, Usage.JAVA_RUNTIME))
			attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objs.named(LibraryElements, LibraryElements.JAR))
		}

		// publish the replacerJar as the outgoing artifact
		outgoing.artifact(tasks.named("replacerJar"))
	}
}

tasks.named("compileReplacerJava", JavaCompile).configure {
	options.release = 19
}

dependencies {
	// Expose lib class to fabric project
	implementation sourceSets.replacer.output

	// Nest it inside the heartbeat JAR
	include(project(path: ":", configuration: "embeddedReplacer"))
}